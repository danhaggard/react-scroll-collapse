import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';

import actions from '../../actions';

import selectors from '../../selectors';

const { nextCollapserIdSelector } = selectors.collapser;
const { ifNotFirstSec } = selectors.utils;

const {
  addCollapser,
  addCollapserChild,
  removeCollapser,
  removeCollapserChild,
  addScrollerChild,
  removeScrollerChild,
} = actions;

export const collapserControllerWrapper = (CollapserController) => {

  class WrappedCollapserController extends Component {

    constructor(props, context) {
      super(props, context);

      const {
        collapserId,
        parentCollapserId,
        parentScrollerId
      } = this.props;

      /*
        If id vals supplied manually through props use those, else use
        auto-generated values.
      */
      this.collapserId = ifNotFirstSec(collapserId, nextCollapserIdSelector());
      this.parentCollapserId = ifNotFirstSec(parentCollapserId, this.context.parentCollapserId); // eslint-disable-line
      this.parentScrollerId = ifNotFirstSec(parentScrollerId, this.context.parentScrollerId); // eslint-disable-line

      /*
        create state slice for this collapser in redux store.
      */
      this.addCollapser();
    }

    getChildContext() {
      return {
        parentCollapserId: this.collapserId,
      };
    }

    componentWillUnmount() {
      if (this.parentCollapserId >= 0) {
        this.props.actions.removeCollapserChild(this.parentCollapserId, this.collapserId);
      }
      if (this.parentScrollerId >= 0) {
        this.props.actions.removeScrollerChild(this.parentScrollerId, this.collapserId);
      }
      this.props.actions.removeCollapser(this.parentCollapserId, this.parentScrollerId,
        this.collapserId);
    }

    addCollapser() {
      /*
        If you want to allow users to override other collapser attrs, do it
        by adding their props as attrs to the collapser object here.
      */
      const collapser = { id: this.collapserId };
      this.props.actions.addCollapser(this.parentScrollerId,
        this.parentCollapserId, collapser, this.collapserId);
      if (this.parentScrollerId >= 0) {
        this.props.actions.addScrollerChild(this.parentScrollerId, collapser);
      }
      if (this.parentCollapserId >= 0) {
        this.props.actions.addCollapserChild(this.parentCollapserId, collapser);
      }
    }

    render() {
      /*
        Pulling these props out so they don't get passed on.  Ignore linting
        error.
      */
      const { actions, ...other } = this.props;
      if (this.collapserId >= 0 && this.parentScrollerId >= 0) {
        return (
          <CollapserController
            {...other}
            collapserId={this.collapserId}
            parentCollapserId={this.parentCollapserId}
            parentScrollerId={this.parentScrollerId}
          />
        );
      }
      return <div />;
    }
  }

  WrappedCollapserController.propTypes = {
    actions: PropTypes.object.isRequired,

    /*
      Pass the following props if you want to override the autogenerated
      ids.
    */
    collapserId: PropTypes.number,
    parentCollapserId: PropTypes.number,
    parentScrollerId: PropTypes.number,
  };

  /*
    The following relies on the react context api to pass component
    heirarchy information to children.
  */
  WrappedCollapserController.childContextTypes = {
    parentCollapserId: PropTypes.number,
    parentScrollerId: PropTypes.number,
  };

  WrappedCollapserController.contextTypes = {
    parentCollapserId: PropTypes.number,
    parentScrollerId: PropTypes.number,
  };

  const mapDispatch = dispatch => ({
    actions: bindActionCreators({
      addCollapser,
      addCollapserChild,
      removeCollapser,
      removeCollapserChild,
      addScrollerChild,
      removeScrollerChild,
    }, dispatch),
  });

  return connect(undefined, mapDispatch)(WrappedCollapserController);
};

export default collapserControllerWrapper;
